// import { NewPatient } from "../types/types";
// import { newPatientSchema } from "../schemas/patientSchema";

// With zod using schema validation for conscise and type-safe parsing
// const toNewPatient = (object: unknown): NewPatient => {
//   return newPatientSchema.parse(object);
// };

////////////////////////////// Utility functions to validate and parse data without Zod //////////////////////////

// The function is a type guard
// The function that returns a boolean and has a type predicate as the return type
// The type predicate is: texte is string

// const isString = (text: unknown): text is string => {
//   return typeof text === "string" || text instanceof String;
// };

// const isDate = (date: string): boolean => {
//   return Boolean(Date.parse(date));
// };

// const isGender = (param: string): param is Gender => {
//   return Object.values(Gender)
//     .map((value) => value.toString())
//     .includes(param);
// };

// const parseName = (name: unknown): string => {
//   if (!name || !isString(name) || name.length < 3) {
//     throw new Error("Incorrect or missing name: " + name);
//   }
//   return name;
// };

// const parseSsn = (ssn: unknown): string => {
//   if (!ssn || !isString(ssn) || ssn.length < 6) {
//     throw new Error("Incorrect or missing ssn: " + ssn);
//   }
//   return ssn;
// };

// const parseDateOfBirth = (dateOfBirth: unknown): string => {
//   if (!dateOfBirth || !isString(dateOfBirth) || !isDate(dateOfBirth)) {
//     throw new Error("Incorrect or missing date of birth: " + dateOfBirth);
//   }
//   return dateOfBirth;
// };

// const parseOccupation = (occupation: unknown): string => {
//   if (!occupation || !isString(occupation) || occupation.length < 3) {
//     throw new Error("Incorrect or missing occupation: " + occupation);
//   }
//   return occupation;
// };

// const parseGender = (gender: unknown): Gender => {
//   if (!gender || !isString(gender) || !isGender(gender)) {
//     throw new Error("Incorrect or missing gender: " + gender);
//   }
//   return gender;
// };

// const toNewPatient = (object: unknown): NewPatient => {
//   if (!object || typeof object !== "object") {
//     throw new Error("Incorrect or missing data: " + object);
//   }

//   if (
//     "name" in object &&
//     "dateOfBirth" in object &&
//     "ssn" in object &&
//     "occupation" in object &&
//     "gender" in object
//   ) {
//     const newPatient: NewPatient = {
//       name: parseName(object.name),
//       dateOfBirth: parseDateOfBirth(object.dateOfBirth),
//       ssn: parseSsn(object.ssn),
//       occupation: parseOccupation(object.occupation),
//       gender: parseGender(object.gender),
//       // id is not included here because it will be generated by uuid in the backend
//     };

//     return newPatient;
//   }

//   throw new Error("Incorrect data: some fields are missing");
// };

// export default toNewPatient;
